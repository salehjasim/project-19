"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.handlers = void 0;
var lib_1 = require("@squoosh/lib");
var fs_extra_1 = require("fs-extra");
var events_1 = require("./events");
var imagePool;
exports.handlers = (_a = {},
    _a[events_1.WorkerEvents.error] = function () { },
    _a[events_1.WorkerEvents.start] = function () {
        if (!imagePool) {
            imagePool = new lib_1.ImagePool();
        }
        return null;
    },
    _a[events_1.WorkerEvents.stop] = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!imagePool) return [3 /*break*/, 2];
                        return [4 /*yield*/, imagePool.close()];
                    case 1:
                        _a.sent();
                        imagePool = undefined;
                        _a.label = 2;
                    case 2: return [2 /*return*/, null];
                }
            });
        });
    },
    _a[events_1.WorkerEvents.process] = function (_a) {
        var inputPath = _a.inputPath, outputPath = _a.outputPath, codec = _a.codec, encoderOptions = _a.encoderOptions;
        return __awaiter(this, void 0, void 0, function () {
            var squooshEncoderOptions, image, rawEncodedImage;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        // Ensure image pool was initialised
                        if (!imagePool) {
                            throw new Error('Image pool was not initialised.');
                        }
                        squooshEncoderOptions = (_b = {},
                            _b[codec] = __assign(__assign({}, lib_1.encoders[codec].defaultEncoderOptions), encoderOptions),
                            _b);
                        image = imagePool.ingestImage(inputPath);
                        return [4 /*yield*/, image.decoded];
                    case 1:
                        _c.sent();
                        return [4 /*yield*/, image.preprocess()];
                    case 2:
                        _c.sent();
                        return [4 /*yield*/, image.encode(squooshEncoderOptions)];
                    case 3:
                        _c.sent();
                        return [4 /*yield*/, image.encodedWith[codec]];
                    case 4:
                        rawEncodedImage = (_c.sent()).binary;
                        // Save the file
                        return [4 /*yield*/, (0, fs_extra_1.writeFile)(outputPath, rawEncodedImage)];
                    case 5:
                        // Save the file
                        _c.sent();
                        return [2 /*return*/, null];
                }
            });
        });
    },
    _a);
process.on('message', function (request) {
    var _a;
    if (typeof request !== 'object')
        return;
    var event = request.event, data = request.data, id = request.id;
    var handler = exports.handlers[event];
    if (handler) {
        var responseOrPromise = handler(data);
        Promise.resolve(responseOrPromise)
            .then(function (response) {
            var _a;
            (_a = process.send) === null || _a === void 0 ? void 0 : _a.call(process, {
                event: event,
                data: response,
                id: id,
            });
        })
            .catch(function (err) {
            var _a;
            (_a = process.send) === null || _a === void 0 ? void 0 : _a.call(process, {
                event: 'error',
                data: err.message,
                id: id,
            });
            console.error(err);
        });
    }
    else {
        (_a = process.send) === null || _a === void 0 ? void 0 : _a.call(process, {
            event: 'error',
            data: "Unhandled event in squoosh worker (" + event + ").",
            id: id,
        });
    }
});
