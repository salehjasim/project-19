"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SquooshPlugin = void 0;
var path_1 = require("path");
var child_process_1 = require("child_process");
var uuid = __importStar(require("uuid"));
var events_1 = require("./worker/events");
var default_extensions_1 = require("./extensions/default.extensions");
var sort_1 = require("./utils/sort");
var worker_1 = require("./worker");
var getWebpackVersion_1 = require("./utils/getWebpackVersion");
__exportStar(require("./types"), exports);
var workerPath = require.resolve('./worker');
var PLUGIN_NAME = 'squoosh-webpack-plugin';
var SquooshPlugin = /** @class */ (function () {
    function SquooshPlugin(options) {
        var _this = this;
        this.workerProcess = null;
        this.handleBeforeCompile = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.emitToWorker(events_1.WorkerEvents.start, null)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        this.handleResolve = function (resolveData) { return __awaiter(_this, void 0, void 0, function () {
            var baseRequest, requestData, options, inputPath, processOptions, processRequest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        baseRequest = {
                            include: false,
                            context: resolveData.context,
                            request: resolveData.request,
                        };
                        return [4 /*yield*/, this.applyRequestHooks(baseRequest)];
                    case 1:
                        requestData = _a.sent();
                        if (!requestData.include) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.options];
                    case 2:
                        options = _a.sent();
                        inputPath = (0, path_1.resolve)(requestData.context, requestData.request);
                        return [4 /*yield*/, this.applyPrepareHooks({
                                skip: false,
                                inputPath: inputPath,
                                outputPath: undefined,
                                codec: options.codec,
                                encoderOptions: options.encoderOptions,
                            })];
                    case 3:
                        processOptions = _a.sent();
                        if (!processOptions.outputPath) {
                            throw new Error('At least one "prepare" hook must set the "outputPath".');
                        }
                        resolveData.request = processOptions.outputPath;
                        if (!!processOptions.skip) return [3 /*break*/, 5];
                        processRequest = {
                            inputPath: processOptions.inputPath,
                            outputPath: processOptions.outputPath,
                            codec: processOptions.codec,
                            encoderOptions: processOptions.encoderOptions,
                        };
                        return [4 /*yield*/, this.emitToWorker(events_1.WorkerEvents.process, processRequest)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        this.handleStop = function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.emitToWorker(events_1.WorkerEvents.stop, null)];
                    case 1:
                        _a.sent();
                        if (this.workerProcess) {
                            this.workerProcess.kill();
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        this.options = this.validateOptions(options);
    }
    SquooshPlugin.prototype.emitToWorker = function (event, data) {
        return __awaiter(this, void 0, void 0, function () {
            var options, worker_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.options];
                    case 1:
                        options = _a.sent();
                        if (!options.useWorker) return [3 /*break*/, 3];
                        if (!this.workerProcess) {
                            this.workerProcess = (0, child_process_1.fork)(workerPath);
                        }
                        worker_2 = this.workerProcess;
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                var request = {
                                    event: event,
                                    data: data,
                                    id: uuid.v4(),
                                };
                                var handler = function (response) {
                                    if (typeof response !== 'object')
                                        return;
                                    if (response.id === request.id) {
                                        worker_2.off('message', handler);
                                        if (response.event === request.event) {
                                            resolve(response.data);
                                        }
                                        else if (response.event === events_1.WorkerEvents.error) {
                                            reject(new Error([
                                                "Error in image-optimise.worker.js.",
                                                "  Error occurred in event the handler for event: " + request.event + ".",
                                                "  Handler responded with the error:",
                                                "    " + response.data,
                                            ].join('\n')));
                                        }
                                    }
                                };
                                worker_2.send(request);
                                worker_2.on('message', handler);
                            })];
                    case 2: return [2 /*return*/, _a.sent()];
                    case 3: return [4 /*yield*/, Promise.resolve(worker_1.handlers[event](data))];
                    case 4: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    SquooshPlugin.prototype.apply = function (compiler) {
        switch ((0, getWebpackVersion_1.getWebpackVersion)(compiler)) {
            case 4:
                return this.webpack4Apply(compiler);
            case 5:
                return this.webpack5Apply(compiler);
        }
    };
    SquooshPlugin.prototype.webpack4Apply = function (compiler) {
        var _this = this;
        compiler.hooks.beforeCompile.tapPromise(PLUGIN_NAME, this.handleBeforeCompile);
        compiler.hooks.normalModuleFactory.tap(PLUGIN_NAME, function (factory) {
            factory.hooks.beforeResolve.tapPromise(PLUGIN_NAME, _this.handleResolve);
        });
        compiler.hooks.done.tapPromise(PLUGIN_NAME, this.handleStop);
    };
    SquooshPlugin.prototype.webpack5Apply = function (compiler) {
        var _this = this;
        compiler.hooks.beforeCompile.tapPromise(PLUGIN_NAME, this.handleBeforeCompile);
        compiler.hooks.normalModuleFactory.tap(PLUGIN_NAME, function (factory) {
            factory.hooks.resolve.tapPromise(PLUGIN_NAME, _this.handleResolve);
        });
        compiler.hooks.done.tapPromise(PLUGIN_NAME, this.handleStop);
    };
    SquooshPlugin.prototype.validateOptions = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var baseOptions;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        baseOptions = __assign({}, options);
                        if (baseOptions.extensions) {
                            switch (typeof baseOptions.extensions) {
                                case 'function':
                                    baseOptions.extensions = baseOptions.extensions(default_extensions_1.DEFAULT_EXTENSIONS);
                                    if (!Array.isArray(baseOptions.extensions)) {
                                        throw new Error('Config Error: "extensions" must return an Array of Extensions.');
                                    }
                                    break;
                                case 'object':
                                    if (Array.isArray(baseOptions.extensions)) {
                                    }
                                default:
                                    throw new Error('Config Error: Type of "extensions" must be either Array or Function.');
                            }
                        }
                        else {
                            baseOptions.extensions = default_extensions_1.DEFAULT_EXTENSIONS;
                        }
                        baseOptions.extensions = (0, sort_1.sortLowHigh)(baseOptions.extensions, function (extension) { return extension.order || 0; });
                        return [4 /*yield*/, this.applyInitializeHooks(baseOptions)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    SquooshPlugin.prototype.applyInitializeHooks = function (baseOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var extensions, options, _i, extensions_1, extension, context;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        extensions = baseOptions.extensions;
                        options = baseOptions;
                        _i = 0, extensions_1 = extensions;
                        _a.label = 1;
                    case 1:
                        if (!(_i < extensions_1.length)) return [3 /*break*/, 4];
                        extension = extensions_1[_i];
                        if (!extension.initialize) return [3 /*break*/, 3];
                        context = Object.freeze({
                            options: options,
                        });
                        return [4 /*yield*/, Promise.resolve(extension.initialize(context, options))];
                    case 2:
                        options = _a.sent();
                        _a.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, options];
                }
            });
        });
    };
    SquooshPlugin.prototype.applyRequestHooks = function (baseRequest) {
        return __awaiter(this, void 0, void 0, function () {
            var options, context, extensions, request, _i, extensions_2, extension;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.options];
                    case 1:
                        options = _a.sent();
                        context = Object.freeze({
                            options: options,
                        });
                        extensions = options.extensions;
                        request = baseRequest;
                        _i = 0, extensions_2 = extensions;
                        _a.label = 2;
                    case 2:
                        if (!(_i < extensions_2.length)) return [3 /*break*/, 5];
                        extension = extensions_2[_i];
                        if (!extension.request) return [3 /*break*/, 4];
                        return [4 /*yield*/, Promise.resolve(extension.request(context, request))];
                    case 3:
                        request = _a.sent();
                        _a.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, request];
                }
            });
        });
    };
    SquooshPlugin.prototype.applyPrepareHooks = function (baseOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var options, context, extensions, prepareOptions, _i, extensions_3, extension;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.options];
                    case 1:
                        options = _a.sent();
                        context = Object.freeze({
                            options: options,
                        });
                        extensions = options.extensions;
                        prepareOptions = baseOptions;
                        _i = 0, extensions_3 = extensions;
                        _a.label = 2;
                    case 2:
                        if (!(_i < extensions_3.length)) return [3 /*break*/, 5];
                        extension = extensions_3[_i];
                        if (!extension.prepare) return [3 /*break*/, 4];
                        return [4 /*yield*/, Promise.resolve(extension.prepare(context, prepareOptions))];
                    case 3:
                        prepareOptions = _a.sent();
                        _a.label = 4;
                    case 4:
                        _i++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, prepareOptions];
                }
            });
        });
    };
    return SquooshPlugin;
}());
exports.SquooshPlugin = SquooshPlugin;
