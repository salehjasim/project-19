"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseResolverExtension = void 0;
var path_1 = require("path");
var tokens_1 = require("../../tokens");
var match_1 = require("../../utils/match");
var BaseResolverExtension = /** @class */ (function () {
    function BaseResolverExtension() {
        this.name = 'BaseResolverExtension';
        this.order = Number.MIN_SAFE_INTEGER; // Ensure this extension runs first
    }
    BaseResolverExtension.prototype.request = function (context, options) {
        // Request is excluded by default
        options.include = false;
        var request = options.request;
        // If request prefix is defined then validate if the request based on this
        if (context.options.requestPrefix) {
            if (request.startsWith(context.options.requestPrefix)) {
                // Include the request
                options.include = true;
                // Trim the prefix
                request = request.substr(context.options.requestPrefix.length);
            }
            else {
                // Exclude the request
                options.include = false;
                // Hand over to next plugin
                return options;
            }
        }
        // Get the absolute path
        var absoluteRequestPath = (0, path_1.resolve)(options.context, request);
        // Validate if the request matches one of the dirs provided
        if (context.options.dirs) {
            var matched = context.options.dirs.some(function (dir) {
                var detokenizedDir = dir.replace(tokens_1.Tokens.ROOT_DIR, process.cwd());
                absoluteRequestPath.startsWith((0, path_1.resolve)(process.cwd(), detokenizedDir));
            });
            if (!matched) {
                // Exclude the request
                options.include = false;
                // Hand over to next plugin
                return options;
            }
        }
        // Validate if any of the include regexs pass
        if (context.options.include) {
            var matchAny = (0, match_1.match)(context.options.include, absoluteRequestPath, {
                match: match_1.Match.ANY,
            });
            if (matchAny) {
                // Exclude the request
                options.include = true;
            }
        }
        // Validate if any of the exclude regexs pass
        if (context.options.exclude) {
            var matchAny = (0, match_1.match)(context.options.exclude, absoluteRequestPath, {
                match: match_1.Match.ANY,
            });
            if (matchAny) {
                // Exclude the request
                options.include = false;
                // Hand over to next plugin
                return options;
            }
        }
        return options;
    };
    return BaseResolverExtension;
}());
exports.BaseResolverExtension = BaseResolverExtension;
